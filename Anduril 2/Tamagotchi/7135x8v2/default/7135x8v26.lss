
7135x8v26.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  000003e2  00000476  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800076  00800076  0000048c  2**0
                  ALLOC
  3 .stab         000006b4  00000000  00000000  0000048c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  00000b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000090  00000000  00000000  00000bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a65  00000000  00000000  00000c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000338  00000000  00000000  000016bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000467  00000000  00000000  000019f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000114  00000000  00000000  00001e5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ec  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000028c  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000024e8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	93 c0       	rjmp	.+294    	; 0x138 <__vector_8>
  12:	9e c0       	rjmp	.+316    	; 0x150 <__vector_9>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e2 ee       	ldi	r30, 0xE2	; 226
  24:	f3 e0       	ldi	r31, 0x03	; 3
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a6 37       	cpi	r26, 0x76	; 118
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a6 e7       	ldi	r26, 0x76	; 118
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a7 37       	cpi	r26, 0x77	; 119
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	cb d0       	rcall	.+406    	; 0x1da <main>
  44:	cc c1       	rjmp	.+920    	; 0x3de <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <WriteEEPROMByte>:
#endif


static NOINLINE void WriteEEPROMByte(uint8_t adress, uint8_t byte)
{
	while(EECR & _BV(EEPE));
  48:	e1 99       	sbic	0x1c, 1	; 28
  4a:	fe cf       	rjmp	.-4      	; 0x48 <WriteEEPROMByte>
	EEAR = adress;								// set address
  4c:	8e bb       	out	0x1e, r24	; 30
	EEDR = byte;								// set data
  4e:	6d bb       	out	0x1d, r22	; 29
	cli();										// disable interrupts
  50:	f8 94       	cli
	EECR |= _BV(EEMWE);							// set "write enable" bit
  52:	e2 9a       	sbi	0x1c, 2	; 28
	EECR |= _BV(EEWE);							// set "write" bit
  54:	e1 9a       	sbi	0x1c, 1	; 28
	sei();
  56:	78 94       	sei
}
  58:	08 95       	ret

0000005a <ReadEEPROMByte>:

static NOINLINE uint8_t ReadEEPROMByte(uint8_t adress)
{
	while(EECR & 0x02);
  5a:	e1 99       	sbic	0x1c, 1	; 28
  5c:	fe cf       	rjmp	.-4      	; 0x5a <ReadEEPROMByte>
	EEAR = adress;								// set address
  5e:	8e bb       	out	0x1e, r24	; 30
	EECR |= _BV(EERE);							// set "read enable" bit
  60:	e0 9a       	sbi	0x1c, 0	; 28
	return (EEDR);
  62:	8d b3       	in	r24, 0x1d	; 29
}
  64:	08 95       	ret

00000066 <all_off>:
	while(--ms);
}

static NOINLINE void all_off(void)			// Выключаем вообще все
{
	LED_PORT = PB_CONFIG;
  66:	80 e3       	ldi	r24, 0x30	; 48
  68:	88 bb       	out	0x18, r24	; 24
	OCR0A  = 0x00;
  6a:	16 be       	out	0x36, r1	; 54
}
  6c:	08 95       	ret

0000006e <cpu_div>:

#ifndef FREQMOON_OFF
static NOINLINE void cpu_div(void)			// Устанавливаем делитель тактовой частоты
{
	CLKPR	= 0x80;
  6e:	80 e8       	ldi	r24, 0x80	; 128
  70:	86 bd       	out	0x26, r24	; 38
	CLKPR	= 0x02;
  72:	82 e0       	ldi	r24, 0x02	; 2
  74:	86 bd       	out	0x26, r24	; 38
}
  76:	08 95       	ret

00000078 <pwr_down>:
	#endif
}

static NOINLINE void pwr_down(void)
{
	cli();
  78:	f8 94       	cli
	ADCSRA	= 0x00;	// отключаем ADC
  7a:	16 b8       	out	0x06, r1	; 6
	TCCR0A	= 0x00;	// отключаем таймер
  7c:	1f bc       	out	0x2f, r1	; 47
	TCCR0B	= 0x00;	// отключаем таймер
  7e:	13 be       	out	0x33, r1	; 51
	PRR		= 0x03;	// 0000 0011
  80:	83 e0       	ldi	r24, 0x03	; 3
  82:	85 bd       	out	0x25, r24	; 37
	DDRB	= 0x00;	// отрубаем порт
  84:	17 ba       	out	0x17, r1	; 23
	PORTB	= 0x00;
  86:	18 ba       	out	0x18, r1	; 24
	MCUCR	= 0x30;	// PwrDown
  88:	80 e3       	ldi	r24, 0x30	; 48
  8a:	85 bf       	out	0x35, r24	; 53
	sleep_cpu();
  8c:	88 95       	sleep
}
  8e:	08 95       	ret

00000090 <set_mode>:
}


static NOINLINE void set_mode(uint8_t mode)	 // сейчас верно для сверху вниз отключено SetMod3();
{
	switch (mode)
  90:	81 30       	cpi	r24, 0x01	; 1
  92:	59 f0       	breq	.+22     	; 0xaa <__stack+0xb>
  94:	81 30       	cpi	r24, 0x01	; 1
  96:	28 f0       	brcs	.+10     	; 0xa2 <__stack+0x3>
  98:	82 30       	cpi	r24, 0x02	; 2
  9a:	49 f0       	breq	.+18     	; 0xae <__stack+0xf>
  9c:	83 30       	cpi	r24, 0x03	; 3
  9e:	71 f4       	brne	.+28     	; 0xbc <__stack+0x1d>
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <__stack+0x13>
	{
		case 0:
			SetMod0();
  a2:	80 e3       	ldi	r24, 0x30	; 48
  a4:	88 bb       	out	0x18, r24	; 24
  a6:	85 e5       	ldi	r24, 0x55	; 85
  a8:	07 c0       	rjmp	.+14     	; 0xb8 <__stack+0x19>
			break;
		case 1:
			SetMod1();
  aa:	80 e3       	ldi	r24, 0x30	; 48
  ac:	03 c0       	rjmp	.+6      	; 0xb4 <__stack+0x15>
			break;
		case 2:
			SetMod2();
  ae:	88 e3       	ldi	r24, 0x38	; 56
  b0:	01 c0       	rjmp	.+2      	; 0xb4 <__stack+0x15>
			break;
		#if MAX_MODES >= 3
			case 3:
				SetMod3();
  b2:	8a e3       	ldi	r24, 0x3A	; 58
  b4:	88 bb       	out	0x18, r24	; 24
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	86 bf       	out	0x36, r24	; 54
				break;
  ba:	08 95       	ret
			case 4:
				SetMod4();
				break;
		#endif
		default:
			pwr_down();
  bc:	dd df       	rcall	.-70     	; 0x78 <pwr_down>
  be:	08 95       	ret

000000c0 <delay_ms>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	ef ea       	ldi	r30, 0xAF	; 175
  c2:	f4 e0       	ldi	r31, 0x04	; 4
  c4:	31 97       	sbiw	r30, 0x01	; 1
  c6:	f1 f7       	brne	.-4      	; 0xc4 <delay_ms+0x4>
  c8:	00 c0       	rjmp	.+0      	; 0xca <delay_ms+0xa>
  ca:	00 00       	nop
}

static NOINLINE void delay_ms(uint8_t ms)	// оформляем так, чтобы меньше места занимало
{
	do { _delay_ms(1); }
	while(--ms);
  cc:	81 50       	subi	r24, 0x01	; 1
  ce:	c1 f7       	brne	.-16     	; 0xc0 <delay_ms>
}
  d0:	08 95       	ret

000000d2 <delay_sec.constprop.0>:
  d2:	8f e3       	ldi	r24, 0x3F	; 63
  d4:	90 e4       	ldi	r25, 0x40	; 64
  d6:	a7 e0       	ldi	r26, 0x07	; 7
  d8:	81 50       	subi	r24, 0x01	; 1
  da:	90 40       	sbci	r25, 0x00	; 0
  dc:	a0 40       	sbci	r26, 0x00	; 0
  de:	e1 f7       	brne	.-8      	; 0xd8 <delay_sec.constprop.0+0x6>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <delay_sec.constprop.0+0x10>
  e2:	00 00       	nop

static NOINLINE void delay_sec(uint8_t ms)
{
	do { _delay_ms(495); }
	while(--ms);
}
  e4:	08 95       	ret

000000e6 <std_loop>:

static NOINLINE void std_loop(void)
{
	while(1)
	{
		set_mode(current_mode);
  e6:	85 2d       	mov	r24, r5
  e8:	d3 df       	rcall	.-90     	; 0x90 <set_mode>
		if (IsNewMode())
  ea:	01 ff       	sbrs	r16, 1
  ec:	0d c0       	rjmp	.+26     	; 0x108 <std_loop+0x22>
		{
			#ifndef	NOMEM
				#ifdef WEAR_LEWELING
					delay_sec(1);
  ee:	f1 df       	rcall	.-30     	; 0xd2 <delay_sec.constprop.0>
					save_byte(CMODE_ADR, current_mode);
  f0:	65 2d       	mov	r22, r5

#ifndef NOMEM
#ifdef WEAR_LEWELING
static INLINE void save_byte(uint8_t startadr, uint8_t data)
{
	uint8_t old_eeprom_pos = eeprom_pos;
  f2:	c0 91 76 00 	lds	r28, 0x0076
	eeprom_pos=(eeprom_pos + 1) & 0x1F;
  f6:	8c 2f       	mov	r24, r28
  f8:	8f 5f       	subi	r24, 0xFF	; 255
  fa:	8f 71       	andi	r24, 0x1F	; 31
  fc:	80 93 76 00 	sts	0x0076, r24
	WriteEEPROMByte((eeprom_pos + startadr), data);
 100:	a3 df       	rcall	.-186    	; 0x48 <WriteEEPROMByte>
	WriteEEPROMByte((old_eeprom_pos + startadr), 0xFF);
 102:	8c 2f       	mov	r24, r28
 104:	6f ef       	ldi	r22, 0xFF	; 255
 106:	a0 df       	rcall	.-192    	; 0x48 <WriteEEPROMByte>
						WriteEEPROMByte(CFG_CURRENTMODE, current_mode);
				#endif
			#endif
		}
		#ifdef THEMPERATURE_CONTROL
			calibrator10 = adch_temp;
 108:	a8 2c       	mov	r10, r8
			calibrator11 = calibrator10;
 10a:	b8 2c       	mov	r11, r8
		#endif
		delay_ms(3);
 10c:	83 e0       	ldi	r24, 0x03	; 3
 10e:	d8 df       	rcall	.-80     	; 0xc0 <delay_ms>
	}
 110:	ea cf       	rjmp	.-44     	; 0xe6 <std_loop>

00000112 <read_byte.constprop.1>:
static NOINLINE uint8_t read_byte(uint8_t startadr)
{
	uint8_t eepdata;
	while(1)
	{
		eepdata = ReadEEPROMByte(eeprom_pos + startadr);
 112:	80 91 76 00 	lds	r24, 0x0076
 116:	a1 df       	rcall	.-190    	; 0x5a <ReadEEPROMByte>
 118:	90 91 76 00 	lds	r25, 0x0076
		if((eepdata != 0xFF) || (eeprom_pos >= SIZE))
 11c:	8f 3f       	cpi	r24, 0xFF	; 255
 11e:	31 f4       	brne	.+12     	; 0x12c <read_byte.constprop.1+0x1a>
 120:	90 32       	cpi	r25, 0x20	; 32
 122:	20 f4       	brcc	.+8      	; 0x12c <read_byte.constprop.1+0x1a>
			break;
		eeprom_pos++;
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	90 93 76 00 	sts	0x0076, r25
 12a:	f3 cf       	rjmp	.-26     	; 0x112 <read_byte.constprop.1>
	}
	if (eeprom_pos < SIZE)
 12c:	90 32       	cpi	r25, 0x20	; 32
 12e:	18 f0       	brcs	.+6      	; 0x136 <read_byte.constprop.1+0x24>
		return eepdata;
	else
		eeprom_pos = 0;
 130:	10 92 76 00 	sts	0x0076, r1
		return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
}
 136:	08 95       	ret

00000138 <__vector_8>:
	WDTCR = (_BV(WDCE) | _BV(WDE));
	WDTCR = (_BV(WDTIE) | WDTO_250MS);
}

ISR(WDT_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
	ClearNewMode();
 142:	0d 7f       	andi	r16, 0xFD	; 253
	short_off_counter = 0;
 144:	22 24       	eor	r2, r2
			if (current_mode == MAX_MODES) current_mode--;
		#else 
			if (current_mode == 0) current_mode++;
		#endif
	#endif
}
 146:	0f 90       	pop	r0
 148:	0f be       	out	0x3f, r0	; 63
 14a:	0f 90       	pop	r0
 14c:	1f 90       	pop	r1
 14e:	18 95       	reti

00000150 <__vector_9>:
}
#endif


ISR (ADC_vect)
{
 150:	1f 92       	push	r1
 152:	0f 92       	push	r0
 154:	0f b6       	in	r0, 0x3f	; 63
 156:	0f 92       	push	r0
 158:	11 24       	eor	r1, r1
 15a:	8f 93       	push	r24
 15c:	9f 93       	push	r25
	uint8_t adch_val = ADCH;
 15e:	85 b1       	in	r24, 0x05	; 5
}

#ifdef THEMPERATURE_CONTROL
static INLINE void switch_adc_in(uint8_t is_temp)
{
	if (is_temp) 			// если температура
 160:	00 ff       	sbrs	r16, 0
 162:	02 c0       	rjmp	.+4      	; 0x168 <__vector_9+0x18>
		#ifdef THERMVD
			ADMUX = 0x62;	//  0110 0010	PB4 Vref = 1.1V
		#else
			ADMUX = 0x22;	//  0010 0010	PB4 Vref = Vcc
 164:	92 e2       	ldi	r25, 0x22	; 34
 166:	01 c0       	rjmp	.+2      	; 0x16a <__vector_9+0x1a>
		#endif
	else
		ADMUX = 0x61;		//  0110 0001	PB2 Vref = 1.1V
 168:	91 e6       	ldi	r25, 0x61	; 97
 16a:	97 b9       	out	0x07, r25	; 7
	uint8_t adch_val = ADCH;

	#ifdef THEMPERATURE_CONTROL
	switch_adc_in(IsMeasureThemp());//

	if(IsMeasureThemp())
 16c:	00 ff       	sbrs	r16, 0
 16e:	0b c0       	rjmp	.+22     	; 0x186 <__vector_9+0x36>
	{
		if (MAX_THEMP)											// Если 0 - отключаем термо защиту
 170:	9c 2d       	mov	r25, r12
 172:	cc 20       	and	r12, r12
 174:	31 f0       	breq	.+12     	; 0x182 <__vector_9+0x32>
		{
			#ifdef REVERSE_SW
			if(adch_val < (uint8_t)(MAX_THEMP + current_mode))  // режимы 0 - слабо 3 - сильно
 176:	95 0d       	add	r25, r5
 178:	89 17       	cp	r24, r25
 17a:	10 f4       	brcc	.+4      	; 0x180 <__vector_9+0x30>
			#else
			if(adch_val < (uint8_t)(MAX_THEMP - current_mode))  // режимы 0 - сильно 3 - слабо
			#endif
				tick_temp++;									// если температура велика - начинаем считать, чтобы убедиться, что это не помеха
 17c:	93 94       	inc	r9
 17e:	01 c0       	rjmp	.+2      	; 0x182 <__vector_9+0x32>
			else
				tick_temp = 0;									// если температура нормализовалась - отбой
 180:	99 24       	eor	r9, r9
		}
		adch_temp = adch_val;
 182:	88 2e       	mov	r8, r24
 184:	06 c0       	rjmp	.+12     	; 0x192 <__vector_9+0x42>
	}
	else
	{
	#endif
		if(adch_val < OFF_VOLTAGE)
 186:	8d 37       	cpi	r24, 0x7D	; 125
 188:	10 f4       	brcc	.+4      	; 0x18e <__vector_9+0x3e>
			tick_volt++;							// если напруга мала - начинаем считать, чтобы убедиться, что это не помеха
 18a:	43 94       	inc	r4
 18c:	01 c0       	rjmp	.+2      	; 0x190 <__vector_9+0x40>
		else
			tick_volt = 0;							// если напруга нормализовалась - отбой
 18e:	44 24       	eor	r4, r4

		adch_volt = adch_val;
 190:	38 2e       	mov	r3, r24

	#ifdef THEMPERATURE_CONTROL
	}
	InvMeasureMode();
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	80 27       	eor	r24, r16
 196:	08 2f       	mov	r16, r24
	#endif

	#ifdef THEMPERATURE_CONTROL
	if((tick_volt > 0x40)|(tick_temp > 0x10))		// задержка для борьбы с помехами
 198:	90 e1       	ldi	r25, 0x10	; 16
 19a:	99 15       	cp	r25, r9
 19c:	18 f0       	brcs	.+6      	; 0x1a4 <__vector_9+0x54>
 19e:	90 e4       	ldi	r25, 0x40	; 64
 1a0:	94 15       	cp	r25, r4
 1a2:	48 f4       	brcc	.+18     	; 0x1b6 <__vector_9+0x66>
	#else
	if(tick_volt > 0x80)
	#endif
	{
		tick_volt = 0;								// обнуляем, чтобы сбрасывать не в самый минимум, а порежимно
 1a4:	44 24       	eor	r4, r4
		#ifdef THEMPERATURE_CONTROL
		tick_temp = 0;
 1a6:	99 24       	eor	r9, r9
		#ifndef REVERSE_SW
		current_mode++;								// уменьшаем яркость
		if (current_mode == (MAX_MODES+1))
			SetOffMode();
		#else
		current_mode--;								// здесь обратный порядок
 1a8:	95 2d       	mov	r25, r5
 1aa:	91 50       	subi	r25, 0x01	; 1
 1ac:	59 2e       	mov	r5, r25
		if (current_mode == 0xFF)
 1ae:	9f 3f       	cpi	r25, 0xFF	; 255
 1b0:	11 f4       	brne	.+4      	; 0x1b6 <__vector_9+0x66>
			SetOffMode();
 1b2:	08 2f       	mov	r16, r24
 1b4:	04 60       	ori	r16, 0x04	; 4
		#endif
	}
}
 1b6:	9f 91       	pop	r25
 1b8:	8f 91       	pop	r24
 1ba:	0f 90       	pop	r0
 1bc:	0f be       	out	0x3f, r0	; 63
 1be:	0f 90       	pop	r0
 1c0:	1f 90       	pop	r1
 1c2:	18 95       	reti

000001c4 <input_mode>:
}
#endif

static NOINLINE void input_mode(void)
{
	all_off();
 1c4:	50 df       	rcall	.-352    	; 0x66 <all_off>
	delay_ms(150);
 1c6:	86 e9       	ldi	r24, 0x96	; 150
 1c8:	7b df       	rcall	.-266    	; 0xc0 <delay_ms>
	mode_saver = 0xAA;
 1ca:	8a ea       	ldi	r24, 0xAA	; 170
 1cc:	68 2e       	mov	r6, r24
	#ifdef MODE_SET_LEVEL
		#if MAX_MODES == 3
			current_mode = ((current_mode - 1) & 0x03);		// ограничиваем счетчик режимов
 1ce:	85 2d       	mov	r24, r5
 1d0:	81 50       	subi	r24, 0x01	; 1
 1d2:	93 e0       	ldi	r25, 0x03	; 3
 1d4:	59 2e       	mov	r5, r25
 1d6:	58 22       	and	r5, r24
			current_mode--;
			if (current_mode == 0xFF)
				current_mode = MAX_MODES;
		#endif
	#endif
}
 1d8:	08 95       	ret

000001da <main>:
}


OS_MAIN int main(void)
{
	cli();										 //disable interrupts
 1da:	f8 94       	cli
	ClearFlags();
 1dc:	00 e0       	ldi	r16, 0x00	; 0
		{
			if((MCUSR & (1<<EXTRF)) == 0)	SetNewMode();
			MCUSR=0;
		}
	#else
		if (mode_switcher == 0xAA)
 1de:	8a ea       	ldi	r24, 0xAA	; 170
 1e0:	d8 16       	cp	r13, r24
 1e2:	09 f4       	brne	.+2      	; 0x1e6 <main+0xc>
			SetNewMode();
 1e4:	02 e0       	ldi	r16, 0x02	; 2
		mode_switcher = 0xAA;
 1e6:	5a ea       	ldi	r21, 0xAA	; 170
 1e8:	d5 2e       	mov	r13, r21
	#endif

	wdt_reset();
 1ea:	a8 95       	wdr
	tick_volt = 0;
 1ec:	44 24       	eor	r4, r4
	#ifdef THEMPERATURE_CONTROL
		tick_temp = 0;
 1ee:	99 24       	eor	r9, r9
		SetMeasureVolt();
 1f0:	0e 7f       	andi	r16, 0xFE	; 254
}


static INLINE void initialize(void)
{
	CLKPR	= 0x80;
 1f2:	90 e8       	ldi	r25, 0x80	; 128
 1f4:	96 bd       	out	0x26, r25	; 38
	CLKPR	= 0x01;			// устанавливаем делитель тактовой частоты
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	86 bd       	out	0x26, r24	; 38

	// Port B initialization
	PORTB	= PB_CONFIG;	// PB4, PB5 подтягиваем к +
 1fa:	20 e3       	ldi	r18, 0x30	; 48
 1fc:	28 bb       	out	0x18, r18	; 24
	DDRB	= DDRB_CONFIG;	// PB0, PB1, PB3 - выходы
 1fe:	2b e0       	ldi	r18, 0x0B	; 11
 200:	27 bb       	out	0x17, r18	; 23

	ACSR	= 0x80;			// 1000 0000  Analog Comparator Disable
 202:	98 b9       	out	0x08, r25	; 8
	DIDR0	= 0x14;
 204:	94 e1       	ldi	r25, 0x14	; 20
 206:	94 bb       	out	0x14, r25	; 20

	PRR		= 0;
 208:	15 bc       	out	0x25, r1	; 37

	ADMUX	= 0x61;  		//  0110 0001 Internal Voltage Reference (1.1V) , ADC1 , 01 PB2 - напруга (или 10 PB4 - температура)
 20a:	91 e6       	ldi	r25, 0x61	; 97
 20c:	97 b9       	out	0x07, r25	; 7
	ADCSRA	= 0xA7;  		//  0xA7 - 1010 1111 включаем, но не активируем, ADC Interrupt Enable, Division Factor = 128
 20e:	97 ea       	ldi	r25, 0xA7	; 167
 210:	96 b9       	out	0x06, r25	; 6
	ADCSRB	= 0;
 212:	13 b8       	out	0x03, r1	; 3

	//- включаем ШИМ
	TCNT0	= 0x00;
 214:	12 be       	out	0x32, r1	; 50
	OCR0A	= 0x00;
 216:	16 be       	out	0x36, r1	; 54
	TCCR0B	= 0x01;
 218:	83 bf       	out	0x33, r24	; 51
	TCCR0A	= 0x83;
 21a:	83 e8       	ldi	r24, 0x83	; 131
 21c:	8f bd       	out	0x2f, r24	; 47

	MCUCR	= 0x20;			// IdleMode
 21e:	80 e2       	ldi	r24, 0x20	; 32
 220:	85 bf       	out	0x35, r24	; 53
	TIMSK0	= 0x00;			// timer interrupt sources
 222:	19 be       	out	0x39, r1	; 57
	GIMSK	= 0x00;			// interrupt sources
 224:	1b be       	out	0x3b, r1	; 59

	sei();					// enable interrupts
 226:	78 94       	sei
#endif
#endif

static INLINE void start_wdt(void)
{
	wdt_reset();
 228:	a8 95       	wdr
	WDTCR = (_BV(WDCE) | _BV(WDE));
 22a:	88 e1       	ldi	r24, 0x18	; 24
 22c:	81 bd       	out	0x21, r24	; 33
	WDTCR = (_BV(WDTIE) | WDTO_250MS);
 22e:	84 e4       	ldi	r24, 0x44	; 68
 230:	81 bd       	out	0x21, r24	; 33

	initialize();
	start_wdt();

#ifdef THEMPERATURE_CONTROL
	uint8_t temporary = ReadEEPROMByte(CFG_CALIBRATE);
 232:	8d e3       	ldi	r24, 0x3D	; 61
 234:	12 df       	rcall	.-476    	; 0x5a <ReadEEPROMByte>
 236:	c8 2f       	mov	r28, r24
	if(!temporary)
 238:	88 23       	and	r24, r24
 23a:	69 f4       	brne	.+26     	; 0x256 <main+0x7c>
	{
		if(IsNewMode())									// если короткий клик записываем новое значение ТК
 23c:	01 ff       	sbrs	r16, 1
 23e:	08 c0       	rjmp	.+16     	; 0x250 <main+0x76>
		{
			if(calibrator11 == calibrator10)			// а вдруг?
 240:	6b 2d       	mov	r22, r11
 242:	ba 14       	cp	r11, r10
 244:	41 f4       	brne	.+16     	; 0x256 <main+0x7c>
			{
				#ifdef REVERSE_SW
					WriteEEPROMByte(CFG_CALIBRATE, calibrator10 - MAX_MODES);		 //
 246:	63 50       	subi	r22, 0x03	; 3
 248:	8d e3       	ldi	r24, 0x3D	; 61
 24a:	fe de       	rcall	.-516    	; 0x48 <WriteEEPROMByte>
					WriteEEPROMByte(CFG_CALIBRATE, calibrator10);		 //
				#endif
				#ifndef FLASH_OFF
					flash(20);
				#endif
				pwr_down();
 24c:	15 df       	rcall	.-470    	; 0x78 <pwr_down>
 24e:	03 c0       	rjmp	.+6      	; 0x256 <main+0x7c>
			}
		}
		else
			WriteEEPROMByte(CFG_CALIBRATE, 0xFF);		 // а если прерывание длинное - отключаем ТК
 250:	8d e3       	ldi	r24, 0x3D	; 61
 252:	6f ef       	ldi	r22, 0xFF	; 255
 254:	f9 de       	rcall	.-526    	; 0x48 <WriteEEPROMByte>
	}
	MAX_THEMP = temporary;
 256:	cc 2e       	mov	r12, r28
	if(MAX_THEMP == 0xFF) MAX_THEMP = 0;				 // на случай, если...
 258:	cf 3f       	cpi	r28, 0xFF	; 255
 25a:	09 f4       	brne	.+2      	; 0x25e <main+0x84>
 25c:	cc 24       	eor	r12, r12
#endif

#ifdef RAMPING
	uint8_t  ramping = ReadEEPROMByte(CFG_RAMPING);
 25e:	8f e3       	ldi	r24, 0x3F	; 63
 260:	fc de       	rcall	.-520    	; 0x5a <ReadEEPROMByte>
	if (!ramping)
 262:	88 23       	and	r24, r24
 264:	69 f4       	brne	.+26     	; 0x280 <main+0xa6>
	{
		if(IsNewMode())									 // если короткий клик записываем новое значение
		{
			WriteEEPROMByte(CFG_RAMPING, ramping_reg);
 266:	8f e3       	ldi	r24, 0x3F	; 63

#ifdef RAMPING
	uint8_t  ramping = ReadEEPROMByte(CFG_RAMPING);
	if (!ramping)
	{
		if(IsNewMode())									 // если короткий клик записываем новое значение
 268:	01 ff       	sbrs	r16, 1
 26a:	07 c0       	rjmp	.+14     	; 0x27a <main+0xa0>
		{
			WriteEEPROMByte(CFG_RAMPING, ramping_reg);
 26c:	67 2d       	mov	r22, r7
 26e:	ec de       	rcall	.-552    	; 0x48 <WriteEEPROMByte>
			WriteEEPROMByte(CFG_MOONMODE, 0x00);
 270:	8b e3       	ldi	r24, 0x3B	; 59
 272:	60 e0       	ldi	r22, 0x00	; 0
 274:	e9 de       	rcall	.-558    	; 0x48 <WriteEEPROMByte>
			ClearNewMode();
 276:	0d 7f       	andi	r16, 0xFD	; 253
 278:	04 c0       	rjmp	.+8      	; 0x282 <main+0xa8>
		}
		else
			WriteEEPROMByte(CFG_RAMPING, 0xFF);
 27a:	6f ef       	ldi	r22, 0xFF	; 255
 27c:	e5 de       	rcall	.-566    	; 0x48 <WriteEEPROMByte>
 27e:	01 c0       	rjmp	.+2      	; 0x282 <main+0xa8>
	}
	else
		ramping_reg = ramping;
 280:	78 2e       	mov	r7, r24

	if (ramping_reg == 0xFF)
 282:	9f ef       	ldi	r25, 0xFF	; 255
 284:	79 16       	cp	r7, r25
 286:	11 f4       	brne	.+4      	; 0x28c <main+0xb2>
		#ifdef FREQMOON_OFF
			ramping_reg = 2;
		#else
			ramping_reg = 1;
 288:	77 24       	eor	r7, r7
 28a:	73 94       	inc	r7
	#else
		ramping_reg = 1;
	#endif
#endif

	adc_on();
 28c:	86 b1       	in	r24, 0x06	; 6
 28e:	88 64       	ori	r24, 0x48	; 72
 290:	86 b9       	out	0x06, r24	; 6
#endif


static INLINE void decode_mode(void)
{
	if (IsNewMode())												// если короткое отключение,...
 292:	01 ff       	sbrs	r16, 1
 294:	87 c0       	rjmp	.+270    	; 0x3a4 <main+0x1ca>
	{
		if(!short_off_counter)
 296:	82 2d       	mov	r24, r2
 298:	22 20       	and	r2, r2
 29a:	31 f4       	brne	.+12     	; 0x2a8 <main+0xce>
		{
			if(mode_saver == 0xAA)
 29c:	9a ea       	ldi	r25, 0xAA	; 170
 29e:	69 16       	cp	r6, r25
 2a0:	11 f4       	brne	.+4      	; 0x2a6 <main+0xcc>
			{
				mode_saver = 0;
 2a2:	66 24       	eor	r6, r6
 2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <main+0xce>
			//	#else
			//		current_mode--;
				#endif
			}
			else
				current_mode++;
 2a6:	53 94       	inc	r5
		}
		short_off_counter++;
 2a8:	8f 5f       	subi	r24, 0xFF	; 255
 2aa:	28 2e       	mov	r2, r24
		if (short_off_counter == BATTERY_CLICKS)					//... проверяем сколько было коротких отключений
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	31 f5       	brne	.+76     	; 0x2fc <main+0x122>
uint8_t switch_voltage [] = {U1, U2, U3, U4};
static INLINE void display_voltage(void)
{
	uint8_t v_batt;
	uint8_t i = 0;
	input_mode();
 2b0:	89 df       	rcall	.-238    	; 0x1c4 <input_mode>
	mode_saver = 0;
 2b2:	66 24       	eor	r6, r6
	v_batt = adch_volt;
 2b4:	e3 2c       	mov	r14, r3
 2b6:	c2 e7       	ldi	r28, 0x72	; 114
 2b8:	d0 e0       	ldi	r29, 0x00	; 0

uint8_t switch_voltage [] = {U1, U2, U3, U4};
static INLINE void display_voltage(void)
{
	uint8_t v_batt;
	uint8_t i = 0;
 2ba:	10 e0       	ldi	r17, 0x00	; 0
	input_mode();
	mode_saver = 0;
	v_batt = adch_volt;
	while(1)
	{
		OCR0A  = 0x80;
 2bc:	40 e8       	ldi	r20, 0x80	; 128
 2be:	f4 2e       	mov	r15, r20
 2c0:	f6 be       	out	0x36, r15	; 54
		delay_ms(75);
 2c2:	8b e4       	ldi	r24, 0x4B	; 75
 2c4:	fd de       	rcall	.-518    	; 0xc0 <delay_ms>
		OCR0A  = 0x00;
 2c6:	16 be       	out	0x36, r1	; 54
		delay_ms(100);
 2c8:	84 e6       	ldi	r24, 0x64	; 100
 2ca:	fa de       	rcall	.-524    	; 0xc0 <delay_ms>
		if(v_batt < switch_voltage[i])
 2cc:	89 91       	ld	r24, Y+
 2ce:	e8 16       	cp	r14, r24
 2d0:	18 f0       	brcs	.+6      	; 0x2d8 <main+0xfe>
			break;
		if(++i >= 5)
 2d2:	1f 5f       	subi	r17, 0xFF	; 255
 2d4:	15 30       	cpi	r17, 0x05	; 5
 2d6:	a1 f7       	brne	.-24     	; 0x2c0 <main+0xe6>
			break;
	}
	delay_ms(100);
 2d8:	84 e6       	ldi	r24, 0x64	; 100
 2da:	f2 de       	rcall	.-540    	; 0xc0 <delay_ms>

	#ifdef THEMPERATURE_CONTROL
	i = ReadEEPROMByte(CFG_CALIBRATE);
 2dc:	8d e3       	ldi	r24, 0x3D	; 61
 2de:	bd de       	rcall	.-646    	; 0x5a <ReadEEPROMByte>
	if((!i) || (i == 0xFF))					 // если термоконтроль отключен - мигаем
 2e0:	81 50       	subi	r24, 0x01	; 1
 2e2:	8e 3f       	cpi	r24, 0xFE	; 254
 2e4:	08 f4       	brcc	.+2      	; 0x2e8 <main+0x10e>
 2e6:	64 c0       	rjmp	.+200    	; 0x3b0 <main+0x1d6>
static INLINE void flash(uint8_t i)
#else
static NOINLINE void flash(uint8_t i)
#endif
{
	all_off();
 2e8:	be de       	rcall	.-644    	; 0x66 <all_off>
 2ea:	ca e0       	ldi	r28, 0x0A	; 10
	do{	delay_ms(20);
 2ec:	84 e1       	ldi	r24, 0x14	; 20
 2ee:	e8 de       	rcall	.-560    	; 0xc0 <delay_ms>
		OCR0A ^= 0xFF;
 2f0:	86 b7       	in	r24, 0x36	; 54
 2f2:	80 95       	com	r24
 2f4:	86 bf       	out	0x36, r24	; 54
 2f6:	c1 50       	subi	r28, 0x01	; 1
		}while(--i);
 2f8:	c9 f7       	brne	.-14     	; 0x2ec <main+0x112>
 2fa:	5a c0       	rjmp	.+180    	; 0x3b0 <main+0x1d6>
		if (short_off_counter == BATTERY_CLICKS)					//... проверяем сколько было коротких отключений
		{
			display_voltage();
		}
		#ifdef MODELINECHG
		else if (short_off_counter == MODELINECHG_CLICKS)
 2fc:	83 30       	cpi	r24, 0x03	; 3
 2fe:	19 f4       	brne	.+6      	; 0x306 <main+0x12c>


static INLINE void mode_line_chg(void)		 // включаем MODELINECHG
#ifdef ONECLICKMOON
{
	input_mode();
 300:	61 df       	rcall	.-318    	; 0x1c4 <input_mode>
	WriteEEPROMByte(CFG_MOONMODE, 0x00);
 302:	8b e3       	ldi	r24, 0x3B	; 59
 304:	07 c0       	rjmp	.+14     	; 0x314 <main+0x13a>
		else if (short_off_counter == MODELINECHG_CLICKS)
			mode_line_chg();
		#endif

		#ifdef THEMPERATURE_CONTROL
		else if (short_off_counter == CALIBRATE_CLICKS)
 306:	8c 30       	cpi	r24, 0x0C	; 12
 308:	41 f4       	brne	.+16     	; 0x31a <main+0x140>


#ifdef THEMPERATURE_CONTROL
static INLINE void calibrate(void)			 // калибровка термоконтроля
{
	input_mode();
 30a:	5c df       	rcall	.-328    	; 0x1c4 <input_mode>
		flash(20);
	#endif
	#ifndef REVERSE_SW
		current_mode = 0;
	#else
		current_mode = MAX_MODES;
 30c:	33 e0       	ldi	r19, 0x03	; 3
 30e:	53 2e       	mov	r5, r19
	#endif
	MAX_THEMP = 0;							 // обнуляем переменную т.е. отключаем ТК
 310:	cc 24       	eor	r12, r12
	WriteEEPROMByte(CFG_CALIBRATE, 0);		 // обнуляем в eeprom
 312:	8d e3       	ldi	r24, 0x3D	; 61
 314:	60 e0       	ldi	r22, 0x00	; 0
 316:	98 de       	rcall	.-720    	; 0x48 <WriteEEPROMByte>
 318:	4b c0       	rjmp	.+150    	; 0x3b0 <main+0x1d6>
		else if (short_off_counter == CALIBRATE_CLICKS)
			calibrate();
		#endif

		#ifdef RAMPING
		else if (short_off_counter == RAMPING_CLICKS)
 31a:	88 30       	cpi	r24, 0x08	; 8
 31c:	89 f4       	brne	.+34     	; 0x340 <main+0x166>

#ifdef RAMPING
static INLINE void ramping_loop(void)
{
	uint8_t k;
	input_mode();
 31e:	52 df       	rcall	.-348    	; 0x1c4 <input_mode>
	WriteEEPROMByte(CFG_RAMPING, 0);		 // обнуляем в eeprom
 320:	8f e3       	ldi	r24, 0x3F	; 63
 322:	60 e0       	ldi	r22, 0x00	; 0
 324:	91 de       	rcall	.-734    	; 0x48 <WriteEEPROMByte>
	#ifndef FREQMOON_OFF
		cpu_div();
 326:	a3 de       	rcall	.-698    	; 0x6e <cpu_div>
	{
		#ifdef FREQMOON_OFF
			ramping_reg = 2;
			k = 6;
		#else
			ramping_reg = 1;
 328:	77 24       	eor	r7, r7
 32a:	73 94       	inc	r7
 32c:	c7 e0       	ldi	r28, 0x07	; 7
			k = 7;
		#endif

		do
		{
			OCR0A = ramping_reg;
 32e:	76 be       	out	0x36, r7	; 54
			#ifdef FREQMOON_OFF
				delay_ms(250);
			#else
				delay_ms(125);
 330:	8d e7       	ldi	r24, 0x7D	; 125
 332:	c6 de       	rcall	.-628    	; 0xc0 <delay_ms>
			#endif
			if (IsOffMode())				 //для контроля батареи
 334:	02 fd       	sbrc	r16, 2
				pwr_down();
 336:	a0 de       	rcall	.-704    	; 0x78 <pwr_down>
			ramping_reg = (ramping_reg<<1);
 338:	77 0c       	add	r7, r7
 33a:	c1 50       	subi	r28, 0x01	; 1
		}while(--k);
 33c:	c1 f7       	brne	.-16     	; 0x32e <main+0x154>
 33e:	f4 cf       	rjmp	.-24     	; 0x328 <main+0x14e>
		else if (short_off_counter == PULSE_MODE_CLICKS)
			pulse();
		#endif

		#ifdef SLOW_PULSE_MODE
		else if (short_off_counter == SLOW_PULSE_MODE_CLICKS)
 340:	86 30       	cpi	r24, 0x06	; 6
 342:	41 f4       	brne	.+16     	; 0x354 <main+0x17a>


#ifdef SLOW_PULSE_MODE
static INLINE void s_pulse(void)	// этот медленный пульс, настраивается
{
	input_mode();
 344:	3f df       	rcall	.-386    	; 0x1c4 <input_mode>
	#ifndef MODE_SET_LEVEL
		current_mode = SlowPulseMod;
	#endif
	while(1)
	{
		set_mode(current_mode);
 346:	85 2d       	mov	r24, r5
 348:	a3 de       	rcall	.-698    	; 0x90 <set_mode>
		delay_ms(PULSE_ON);
 34a:	8d e7       	ldi	r24, 0x7D	; 125
 34c:	b9 de       	rcall	.-654    	; 0xc0 <delay_ms>
		all_off();
 34e:	8b de       	rcall	.-746    	; 0x66 <all_off>
		delay_sec(PULSE_OFF);
 350:	c0 de       	rcall	.-640    	; 0xd2 <delay_sec.constprop.0>
 352:	f9 cf       	rjmp	.-14     	; 0x346 <main+0x16c>
		else if (short_off_counter == VELO_STROBE_CLICKS)
			velo_pulse();
		#endif

		#ifdef POLICE_MODE
		else if (short_off_counter == POLICE_MODE_CLICKS)
 354:	85 30       	cpi	r24, 0x05	; 5
 356:	81 f4       	brne	.+32     	; 0x378 <main+0x19e>

#ifdef POLICE_MODE
static INLINE void police_pulse(void)
{
	uint8_t k;
	input_mode();
 358:	35 df       	rcall	.-406    	; 0x1c4 <input_mode>
	{
		#ifdef FREQMOON_OFF
			ramping_reg = 2;
			k = 6;
		#else
			ramping_reg = 1;
 35a:	c4 e0       	ldi	r28, 0x04	; 4
	#endif
	do{
		k = 4;
		do
		{
			set_mode(current_mode);
 35c:	85 2d       	mov	r24, r5
 35e:	98 de       	rcall	.-720    	; 0x90 <set_mode>
			delay_ms(5);
 360:	85 e0       	ldi	r24, 0x05	; 5
 362:	ae de       	rcall	.-676    	; 0xc0 <delay_ms>
			all_off();
 364:	80 de       	rcall	.-768    	; 0x66 <all_off>
			delay_ms(50);
 366:	82 e3       	ldi	r24, 0x32	; 50
 368:	ab de       	rcall	.-682    	; 0xc0 <delay_ms>
 36a:	c1 50       	subi	r28, 0x01	; 1
		}while(--k);
 36c:	b9 f7       	brne	.-18     	; 0x35c <main+0x182>
		delay_ms(200);
 36e:	88 ec       	ldi	r24, 0xC8	; 200
 370:	a7 de       	rcall	.-690    	; 0xc0 <delay_ms>
		delay_ms(140);
 372:	8c e8       	ldi	r24, 0x8C	; 140
 374:	a5 de       	rcall	.-694    	; 0xc0 <delay_ms>
 376:	f1 cf       	rjmp	.-30     	; 0x35a <main+0x180>
		else if (short_off_counter == POLICE_MODE_CLICKS)
			police_pulse();
		#endif

		#ifdef SOS_MODE
		else if (short_off_counter == SOS_MODE_CLICKS)
 378:	87 30       	cpi	r24, 0x07	; 7
 37a:	d1 f4       	brne	.+52     	; 0x3b0 <main+0x1d6>
#ifdef SOS_MODE
uint8_t sos_delay [] = {255, 75, 75, 75, 75, 75, 225, 225, 75, 225, 75, 225, 225, 75, 75, 75, 75, 75};
static INLINE void sos_pulse(void)	// это режим SOS
{
	uint8_t k;
	input_mode();
 37c:	23 df       	rcall	.-442    	; 0x1c4 <input_mode>
 37e:	c1 e6       	ldi	r28, 0x61	; 97
 380:	d0 e0       	ldi	r29, 0x00	; 0
	{
		#ifdef FREQMOON_OFF
			ramping_reg = 2;
			k = 6;
		#else
			ramping_reg = 1;
 382:	10 e0       	ldi	r17, 0x00	; 0
		delay_ms(1);
	}
}


OS_MAIN int main(void)
 384:	fe 01       	movw	r30, r28
 386:	31 97       	sbiw	r30, 0x01	; 1
	while(1)
	{
		k = 0;
		do
		{
			delay_ms(sos_delay[k]);
 388:	80 81       	ld	r24, Z
 38a:	9a de       	rcall	.-716    	; 0xc0 <delay_ms>
			k++;
			set_mode(current_mode);
 38c:	85 2d       	mov	r24, r5
 38e:	80 de       	rcall	.-768    	; 0x90 <set_mode>
			delay_ms(sos_delay[k]);
 390:	88 81       	ld	r24, Y
 392:	96 de       	rcall	.-724    	; 0xc0 <delay_ms>
			k++;
 394:	1e 5f       	subi	r17, 0xFE	; 254
			all_off();
 396:	67 de       	rcall	.-818    	; 0x66 <all_off>
 398:	22 96       	adiw	r28, 0x02	; 2
		}while(k != 18);
 39a:	12 31       	cpi	r17, 0x12	; 18
 39c:	99 f7       	brne	.-26     	; 0x384 <main+0x1aa>
		delay_ms(255);
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	8f de       	rcall	.-738    	; 0xc0 <delay_ms>
 3a2:	ed cf       	rjmp	.-38     	; 0x37e <main+0x1a4>
			sos_pulse();
		#endif
	}
	else
	{
		short_off_counter = 0;
 3a4:	22 24       	eor	r2, r2

	#ifndef	NOMEM												// если было длинное (включили) - читаем режим
		#ifdef WEAR_LEWELING
			current_mode = read_byte(CMODE_ADR);
 3a6:	b5 de       	rcall	.-662    	; 0x112 <read_byte.constprop.1>
 3a8:	58 2e       	mov	r5, r24
		#else
			current_mode = ReadEEPROMByte(CFG_CURRENTMODE);
		#endif
			if (current_mode == 0xFF)							// на случай, если...
 3aa:	8f 3f       	cpi	r24, 0xFF	; 255
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x1d6>
			current_mode = START_MODE;
 3ae:	55 24       	eor	r5, r5
		current_mode = START_MODE;								// обнуляем, чтобы всегда стартовать с минимума
	#endif
	}

	#if MAX_MODES == 3
		current_mode = current_mode & 0x03;						// ограничиваем счетчик режимов
 3b0:	83 e0       	ldi	r24, 0x03	; 3
 3b2:	58 22       	and	r5, r24
	decode_mode();

#ifndef MODELINECHG
		std_loop();
#else
	if (ReadEEPROMByte(CFG_MOONMODE) == 0xFF)
 3b4:	8b e3       	ldi	r24, 0x3B	; 59
 3b6:	51 de       	rcall	.-862    	; 0x5a <ReadEEPROMByte>
 3b8:	8f 3f       	cpi	r24, 0xFF	; 255
 3ba:	31 f0       	breq	.+12     	; 0x3c8 <main+0x1ee>
		std_loop();
	else
		#ifdef ONECLICKMOON
			if(IsNewMode())							 // если короткий клик выходим из MODELINECHG
 3bc:	01 ff       	sbrs	r16, 1
 3be:	05 c0       	rjmp	.+10     	; 0x3ca <main+0x1f0>
			{
				WriteEEPROMByte(CFG_MOONMODE, 0xFF);
 3c0:	8b e3       	ldi	r24, 0x3B	; 59
 3c2:	6f ef       	ldi	r22, 0xFF	; 255
 3c4:	41 de       	rcall	.-894    	; 0x48 <WriteEEPROMByte>
				#ifdef RST_LEV_MOON
					#ifdef REVERSE_SW 				 // сброс яркости после мунлайта
						current_mode = 0;
 3c6:	55 24       	eor	r5, r5
						current_mode = MAX_MODES;
					#endif
				#else
					ClearNewMode();
				#endif
				std_loop();
 3c8:	8e de       	rcall	.-740    	; 0xe6 <std_loop>
}


static INLINE void moon_loop(void)				 // MOONMODE
{
	mode_saver = 0xAA;
 3ca:	2a ea       	ldi	r18, 0xAA	; 170
 3cc:	62 2e       	mov	r6, r18
	OCR0A = ramping_reg;
 3ce:	76 be       	out	0x36, r7	; 54

	#ifndef FREQMOON_OFF
		cpu_div();
 3d0:	4e de       	rcall	.-868    	; 0x6e <cpu_div>
	#endif
	while(1)
	{
		sleep_cpu();
 3d2:	88 95       	sleep
		if (IsOffMode())
 3d4:	02 fd       	sbrc	r16, 2
			pwr_down();
 3d6:	50 de       	rcall	.-864    	; 0x78 <pwr_down>
		delay_ms(1);
 3d8:	81 e0       	ldi	r24, 0x01	; 1
 3da:	72 de       	rcall	.-796    	; 0xc0 <delay_ms>
 3dc:	fa cf       	rjmp	.-12     	; 0x3d2 <main+0x1f8>

000003de <_exit>:
 3de:	f8 94       	cli

000003e0 <__stop_program>:
 3e0:	ff cf       	rjmp	.-2      	; 0x3e0 <__stop_program>
